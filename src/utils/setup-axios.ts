import axios from 'axios';
import DataLocal from '../data/DataLocal';
import {refreshTokenAPI} from './AuthService';
import {BASE_URL} from '../env';
import Toast from 'react-native-toast-message';

const api = axios.create({
  baseURL: BASE_URL,
  timeout: 60000,
});

declare module 'axios' {
  export interface AxiosRequestConfig {
    noAuth?: boolean;
    _retry?: boolean; // ƒê√°nh d·∫•u request ƒë√£ th·ª≠ l·∫°i hay ch∆∞a
  }
}

// üõ°Ô∏è Bi·∫øn ki·ªÉm so√°t tr·∫°ng th√°i ƒëang refresh
let isRefreshing = false;

// üß† H√†ng ƒë·ª£i c√°c request ƒëang b·ªã t·∫°m gi·ªØ ch·ªù token m·ªõi
let refreshSubscribers: ((token: string) => void)[] = [];

// ‚úÖ H√†m th√™m request v√†o h√†ng ƒë·ª£i
const addSubscriber = (callback: (token: string) => void) => {
  refreshSubscribers.push(callback);
};

// ‚úÖ H√†m g·ªçi l·∫°i t·∫•t c·∫£ c√°c request ƒë√£ b·ªã gi·ªØ l·∫°i v·ªõi token m·ªõi
const onTokenRefreshed = (newToken: string) => {
  refreshSubscribers.forEach(callback => callback(newToken));
  refreshSubscribers = []; // Clear h√†ng ƒë·ª£i sau khi g·ªçi xong
};

// ‚úÖ Interceptor tr∆∞·ªõc khi g·ª≠i request
api.interceptors.request.use(
  async config => {
    await DataLocal.getToken(); // L·∫•y token hi·ªán t·∫°i t·ª´ storage

    if (config?.noAuth) {
      return config; // B·ªè qua n·∫øu request kh√¥ng c·∫ßn auth
    }

    if (DataLocal.token?.accessToken) {
      config.headers.Authorization = `Bearer ${DataLocal.token.accessToken}`;
    }

    return config;
  },
  error => Promise.reject(error),
);

// ‚úÖ Interceptor khi nh·∫≠n response
api.interceptors.response.use(
  response => response,
  async error => {
    const originalRequest = error.config;

    // üìõ N·∫øu l·ªói l√† 401 (token h·∫øt h·∫°n) v√† ch∆∞a retry
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true; // ƒê√°nh d·∫•u request n√†y ƒë√£ retry

      // üö´ N·∫øu kh√¥ng c√≥ refresh token ‚Üí ƒëƒÉng xu·∫•t
      await DataLocal.getToken();
      if (!DataLocal.token?.refreshToken) {
        Toast.show({type: 'error', text2: 'Kh√¥ng c√≥ refresh token'});
        DataLocal.removeAll(); // ƒêƒÉng xu·∫•t
        return Promise.reject(error);
      }

      if (!isRefreshing) {
        // üîÉ Ch·ªâ g·ªçi refresh token 1 l·∫ßn
        isRefreshing = true;

        try {
          const newToken = await refreshTokenAPI(DataLocal.token.refreshToken);
          if (!newToken) {
            throw new Error('Refresh token th·∫•t b·∫°i');
          }

          // üíæ L∆∞u token m·ªõi
          await DataLocal.saveToken(
            newToken.accessToken,
            newToken.refreshToken,
            newToken.expiresIn,
            newToken.refreshExpiresIn,
          );

          Toast.show({type: 'success', text2: 'L√†m m·ªõi token th√†nh c√¥ng'});

          isRefreshing = false;
          onTokenRefreshed(newToken.accessToken); // üîÅ G·ªçi l·∫°i c√°c request ƒë√£ ƒë·ª£i

          // üìå G·ª≠i l·∫°i request hi·ªán t·∫°i v·ªõi token m·ªõi
          originalRequest.headers.Authorization = `Bearer ${newToken.accessToken}`;
          return api(originalRequest);
        } catch (refreshError) {
          isRefreshing = false;
          Toast.show({
            type: 'error',
            text2: 'Refresh token th·∫•t b·∫°i, ƒëƒÉng xu·∫•t...',
          });
          DataLocal.removeAll();
          return Promise.reject(refreshError);
        }
      }

      // ‚è∏Ô∏è N·∫øu ƒëang refresh ‚Üí ch·ªù token m·ªõi r·ªìi g·ªçi l·∫°i request sau
      return new Promise(resolve => {
        addSubscriber((newToken: string) => {
          originalRequest.headers.Authorization = `Bearer ${newToken}`;
          resolve(api(originalRequest)); // G·ªçi l·∫°i request sau khi c√≥ token m·ªõi
        });
      });
    }

    // ‚ùå L·ªói m·∫°ng
    if (error.message === 'Network Error') {
      return Promise.reject({
        message: 'K·∫øt n·ªëi m·∫°ng kh√¥ng ·ªïn ƒë·ªãnh!',
        status: 0,
        type: 'server',
        error: true,
      });
    }

    return Promise.reject(error);
  },
);

export default api;
