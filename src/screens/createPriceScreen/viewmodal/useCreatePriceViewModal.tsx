// views/viewmodal/useCreatePriceViewModal.ts

import { useState, useMemo, useCallback, useRef, useEffect } from 'react';
import { InfiniteData, useInfiniteQuery, useQueryClient } from '@tanstack/react-query';
import {
  TypeCreatePrice,
  fetchCreatePrice,
  CreatePriceFilters,
  clearCreatePriceCache,
} from '../modal/CreatePriceModal';
import debounce from 'lodash/debounce';
import { useAlert } from '@/elements/alert/AlertProvider';
import { useTranslation } from 'react-i18next';

const ITEMS_PER_PAGE = 50;
const DEBOUNCE_DELAY = 300;

export function useCreatePriceViewModel() {
  const { t } = useTranslation();
  const queryClient = useQueryClient();

  // State gi·ªØ gi√° tr·ªã filter hi·ªán t·∫°i (ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng cho query)
  const [appliedFilters, setAppliedFilters] = useState<CreatePriceFilters>({});
  // State gi·ªØ gi√° tr·ªã input t√¨m ki·∫øm tr√™n UI (ch∆∞a debounce)
  const [currentSearchInput, setCurrentSearchInput] = useState<string>('');

  // Ref cho h√†m debounce ƒë·ªÉ c√≥ th·ªÉ cancel
  const debouncedSetSearchKeyRef = useRef<ReturnType<
    typeof debounce<(_val: string) => void>
  > | null>(null);

  // Kh·ªüi t·∫°o debounce v√† g√°n v√†o ref
  useEffect(() => {
    if (!debouncedSetSearchKeyRef.current) {
      debouncedSetSearchKeyRef.current = debounce((val: string) => {
        // C·∫≠p nh·∫≠t searchKey trong appliedFilters, v√† reset page v·ªÅ 1
        setAppliedFilters(prev => ({ ...prev, searchKey: val }));
      }, DEBOUNCE_DELAY);
    }
    // Cleanup function ƒë·ªÉ h·ªßy debounce khi component unmount
    return () => {
      debouncedSetSearchKeyRef.current?.cancel();
    };
  }, []); // [] ƒë·∫£m b·∫£o debounce ch·ªâ ƒë∆∞·ª£c t·∫°o m·ªôt l·∫ßn

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi text trong √¥ t√¨m ki·∫øm
  const onSearch = useCallback((val: string) => {
    setCurrentSearchInput(val); // C·∫≠p nh·∫≠t gi√° tr·ªã hi·ªÉn th·ªã ngay l·∫≠p t·ª©c
    debouncedSetSearchKeyRef.current?.(val); // K√≠ch ho·∫°t debounce ƒë·ªÉ c·∫≠p nh·∫≠t filter th·ª±c t·∫ø
  }, []);

  // L·∫Øng nghe `appliedFilters` ƒë·ªÉ ƒë·∫£m b·∫£o queryKey thay ƒë·ªïi khi filter ƒë∆∞·ª£c √°p d·ª•ng
  // `queryKey` ph·∫£i l√† m·ªôt m·∫£ng ·ªïn ƒë·ªãnh, thay ƒë·ªïi khi v√† ch·ªâ khi c√°c gi√° tr·ªã l·ªçc thay ƒë·ªïi
  const queryKey = useMemo(
    () => [
      'listCreatePrice',
      appliedFilters.searchKey?.trim() || '',
      appliedFilters.fromDate?.toISOString() || '',
      appliedFilters.toDate?.toISOString() || '',
      appliedFilters.department?.id || '',
      appliedFilters.requester?.id || '',
    ],
    [appliedFilters], // Dependency l√† appliedFilters ƒë·ªÉ re-memoize khi filter thay ƒë·ªïi
  );

  // Infinite Query cho ph√¢n trang + search + filter
  const {
    data,
    isLoading,
    isFetching,
    isFetchingNextPage,
    refetch,
    fetchNextPage,
    hasNextPage,
    isRefetching,
    isError,
  } = useInfiniteQuery<TypeCreatePrice[], Error>({
    queryKey: queryKey, // S·ª≠ d·ª•ng queryKey ƒë√£ memoize
    queryFn: async ({ pageParam = 1 }) => {
      // M·∫∑c ƒë·ªãnh pageParam l√† 1 n·∫øu undefined
      // fetchCreatePrice s·∫Ω nh·∫≠n tr·ª±c ti·∫øp appliedFilters
      return fetchCreatePrice(pageParam as number, ITEMS_PER_PAGE, appliedFilters);
    },
    getNextPageParam: (lastPage, allPages) =>
      lastPage.length === ITEMS_PER_PAGE ? allPages.length + 1 : undefined,
    initialPageParam: 1,
    staleTime: 60 * 1000, // D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c coi l√† stale sau 1 ph√∫t
    refetchOnWindowFocus: false, // Kh√¥ng t·ª± ƒë·ªông refetch khi focus l·∫°i c·ª≠a s·ªï
    refetchOnMount: false, // Kh√¥ng t·ª± ƒë·ªông refetch khi component mount l·∫ßn ƒë·∫ßu
  });

  // G·ªôp data c√°c page l·∫°i th√†nh 1 m·∫£ng
  const flatData = useMemo(() => data?.pages.flat() ?? [], [data]);

  // Refresh (k√©o xu·ªëng)
  const onRefresh = useCallback(() => {
    console.log('onRefresh called from ViewModel. Forcing refetch.');
    // Lu√¥n g·ªçi clear cache th·ªß c√¥ng c·ªßa b·∫°n tr∆∞·ªõc khi refetch
    // ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o API s·∫Ω ƒë∆∞·ª£c g·ªçi l·∫°i ngay c·∫£ khi TanStack Query cho r·∫±ng d·ªØ li·ªáu v·∫´n c√≤n fresh
    clearCreatePriceCache();
    // refetch() s·∫Ω k√≠ch ho·∫°t l·∫°i queryFn, v√† queryFn s·∫Ω g·ªçi API n·∫øu cache th·ªß c√¥ng tr·ªëng
    refetch();
  }, [refetch]); // Ch·ªâ ph·ª• thu·ªôc v√†o refetch t·ª´ useInfiniteQuery

  // Load more (cu·ªôn cu·ªëi danh s√°ch)
  const onLoadMore = useCallback(() => {
    console.log('onLoadMore called.');
    // Bug fix: ch·ªâ fetchNextPage n·∫øu hasNextPage l√† true v√† kh√¥ng ƒëang fetching
    if (hasNextPage && !isFetchingNextPage) {
      fetchNextPage();
    }
  }, [hasNextPage, isFetchingNextPage, fetchNextPage]);

  // Nh·∫≠n filter object t·ª´ FilterScreen
  const applyFilters = useCallback((newFilter: CreatePriceFilters) => {
    console.log('Applying filters:', newFilter);
    // H·ªßy debounce search tr∆∞·ªõc khi √°p d·ª•ng b·ªô l·ªçc m·ªõi ƒë·ªÉ tr√°nh xung ƒë·ªôt
    debouncedSetSearchKeyRef.current?.cancel();
    setCurrentSearchInput(newFilter.searchKey || ''); // C·∫≠p nh·∫≠t input search
    setAppliedFilters(newFilter); // √Åp d·ª•ng b·ªô l·ªçc m·ªõi, ƒëi·ªÅu n√†y s·∫Ω k√≠ch ho·∫°t refetch
  }, []);

  const { showAlert } = useAlert();
  const onDelete = useCallback(
    async (id: string, onSuccess?: (deletedId: string) => void) => {
      // Bug fix: queryKey cho getQueryData ph·∫£i gi·ªëng h·ªát queryKey trong useInfiniteQuery
      const currentQueryKey = [
        'listCreatePrice',
        appliedFilters.searchKey?.trim() || '',
        appliedFilters.fromDate?.toISOString() || '',
        appliedFilters.toDate?.toISOString() || '',
        appliedFilters.department?.id || '',
        appliedFilters.requester?.id || '',
      ];

      const cached = queryClient.getQueryData<InfiniteData<TypeCreatePrice[]>>(currentQueryKey);
      if (!cached) {
        console.warn('üü• No cache found for key:', currentQueryKey);
        return false;
      }

      try {
        if (Number(id) % 5 !== 0) {
          // Gi·∫£ l·∫≠p th√†nh c√¥ng cho c√°c id kh√¥ng chia h·∫øt cho 5
          console.log('‚úÖ Deleting item successfully...');
          queryClient.setQueryData(currentQueryKey, {
            // S·ª≠ d·ª•ng currentQueryKey ƒë√£ kh·ªõp
            ...cached,
            pages: cached.pages.map(page => page.filter(item => item.id !== id) || []),
          });

          onSuccess?.(id);
          return true;
        } else {
          // Simulate failed delete for ids divisible by 5
          await new Promise(resolve => setTimeout(() => resolve(undefined), 500));
          showAlert(t('createPrice.warningRemove'), '', [
            {
              text: t('createPrice.close'),
              onPress: () => {},
            },
          ]);
          return false;
        }
      } catch (error) {
        console.error('Error deleting item:', error);
        return false;
      }
    },
    [queryClient, appliedFilters, showAlert, t], // Th√™m appliedFilters v√†o dependencies
  );

  const handleDelete = useCallback(
    (id: string, onSuccess?: (deletedId: string) => void) => {
      showAlert(t('createPrice.remove.title'), '', [
        {
          text: t('createPrice.remove.cancel'),
          style: 'cancel',
          onPress: () => {},
        },
        {
          text: t('createPrice.remove.agree'),
          onPress: async () => {
            const success = await onDelete(id, onSuccess);
            if (!success) {
              console.log('‚ùå Delete failed, no action needed');
            }
          },
        },
      ]);
    },
    [showAlert, t, onDelete],
  );

  return {
    flatData,
    isLoading,
    isFetching,
    isRefetching,
    isFetchingNextPage,
    hasNextPage: !!hasNextPage,
    onRefresh,
    onLoadMore,
    onSearch, // H√†m onSearch ƒë·ªÉ c·∫≠p nh·∫≠t input v√† debounce
    applyFilters,
    handleDelete,
    currentPrNoInput: currentSearchInput, // Gi√° tr·ªã input tr√™n UI
    currentFilters: appliedFilters, // Filter hi·ªán t·∫°i ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng
    isError,
  };
}
