import { Alert, Platform, PermissionsAndroid } from 'react-native';
import notifee, { AndroidImportance, EventType } from '@notifee/react-native';
import Toast from 'react-native-toast-message';
import { navigate } from '../src/navigation/RootNavigation';
import { AppState } from 'react-native';

import {
  getMessaging,
  getToken,
  requestPermission,
  onMessage,
  setBackgroundMessageHandler,
  onNotificationOpenedApp,
  getInitialNotification,
  AuthorizationStatus,
  registerDeviceForRemoteMessages,
} from '@react-native-firebase/messaging';
import Clipboard from '@react-native-clipboard/clipboard';
// Kh√¥ng c·∫ßn import useInfoUser ·ªü ƒë√¢y n·ªØa v√¨ ƒë√¢y l√† h√†m ti·ªán √≠ch
// import { useInfoUser } from '@/zustand/store/useInfoUser/useInfoUser';

const messaging = getMessaging();

// T·∫°o channel notification cho Android
export const createDefaultNotificationChannel = async () => {
  try {
    await notifee.createChannel({
      id: 'default_channel_id_v2',
      name: 'Default Channel',
      sound: 'default',
      importance: AndroidImportance.HIGH,
    });
    console.log('[FCM] ‚úÖ Notification channel created ho·∫∑c ƒë√£ t·ªìn t·∫°i');
  } catch (error) {
    console.log('[FCM] ‚ùå T·∫°o notiLfication channel th·∫•t b·∫°i:', error);
  }
};

// Xin quy·ªÅn th√¥ng b√°o tr√™n Android 13+
const requestAndroidNotificationPermission = async (): Promise<boolean> => {
  if (Platform.OS !== 'android') return true;
  if (Platform.Version < 33) return true;

  try {
    const granted = await PermissionsAndroid.request(
      PermissionsAndroid.PERMISSIONS.POST_NOTIFICATIONS,
    );
    return granted === PermissionsAndroid.RESULTS.GRANTED;
  } catch (error) {
    return false;
  }
};

// L·∫•y FCM token v√† g·ª≠i l√™n server
// H√†m n√†y b√¢y gi·ªù nh·∫≠n setDeviceToken l√†m m·ªôt tham s·ªë
export const getFCMTokenAndSendToServer = async (
  t: (key: string) => string,
  setDeviceToken: (token: string) => void, // <-- Th√™m tham s·ªë n√†y
) => {
  try {
    await registerDeviceForRemoteMessages(messaging);
    const permissionGranted = await requestAndroidNotificationPermission();

    if (!permissionGranted) {
      console.log('[FCM] ‚ùå Ng∆∞·ªùi d√πng kh√¥ng c·∫•p quy·ªÅn th√¥ng b√°o');
      return;
    }

    const token = await getToken(messaging);

    console.log('[FCM] üéØ FCM Device Token:', token);
    setDeviceToken(token); // <-- G·ªçi h√†m ƒë∆∞·ª£c truy·ªÅn t·ª´ b√™n ngo√†i
    // Clipboard.setString(token);

    // G·ª≠i token l√™n server (tu·ª≥ ch·ªçn b·∫≠t l·∫°i)
    // const resp = await api.post('notifications/app-push/register', {
    //   pushToken: token,
    //   deviceName: await DeviceInfo.getDeviceName(),
    //   deviceInfo: DeviceInfo.getSystemVersion(),
    // });
    // if (resp.status !== 200 || resp.data.status !== 0) throw new Error('API error');
  } catch (error: any) {
    console.error('[FCM] ‚ùå L·ªói khi l·∫•y token v√† g·ª≠i l√™n server:', error);
    Toast.show({
      type: 'error',
      text2: '[FCM] ‚ùå L·ªói khi l·∫•y token v√† g·ª≠i l√™n server:',
    });
  }
};

// C·∫•u h√¨nh c√°c s·ª± ki·ªán li√™n quan ƒë·∫øn FCM
export const setupFCM = async () => {
  console.log('[FCM] üîß B·∫Øt ƒë·∫ßu setupFCM');

  await createDefaultNotificationChannel();

  const authStatus = await requestPermission(messaging);
  console.log('[FCM] üì≤ Tr·∫°ng th√°i quy·ªÅn:', authStatus);

  const enabled =
    authStatus === AuthorizationStatus.AUTHORIZED || authStatus === AuthorizationStatus.PROVISIONAL;

  if (!enabled) {
    console.log('[FCM] ‚ùå Kh√¥ng ƒë∆∞·ª£c c·∫•p quy·ªÅn th√¥ng b√°o');
    return;
  }
  console.log('[FCM] ‚úÖ ƒê√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn');

  // L·∫Øng nghe khi app ƒëang foreground
  onMessage(messaging, async remoteMessage => {
    console.log('[FCM] üîî Foreground message:', remoteMessage);
    await showLocalNotification(remoteMessage);
  });

  // Khi app ƒëang background (Android)
  setBackgroundMessageHandler(messaging, async remoteMessage => {
    console.log('[FCM] üí§ Background message:', remoteMessage);
    await showLocalNotification(remoteMessage);
  });

  // L·∫Øng nghe s·ª± ki·ªán ng∆∞·ªùi d√πng nh·∫•n v√†o notification (c·∫£ foreground v√† background)
  notifee.onForegroundEvent(({ type, detail }) => {
    if (type === EventType.PRESS) {
      console.log('[FCM] üëÜ Notification pressed foreground:', detail.notification);
      handleNotificationAction(detail);
    }
  });

  // Khi ng∆∞·ªùi d√πng nh·∫•n v√†o notification khi app ·ªü background
  onNotificationOpenedApp(messaging, remoteMessage => {
    console.log('[FCM] üïπ Notification opened (background):', remoteMessage);
    handleNotificationAction(remoteMessage);
  });

  // Khi ng∆∞·ªùi d√πng m·ªü app t·ª´ tr·∫°ng th√°i killed
  const initialNotification = await getInitialNotification(messaging);
  if (initialNotification) {
    console.log('[FCM] üßä Notification khi m·ªü app l·∫ßn ƒë·∫ßu:', initialNotification);
    handleNotificationAction(initialNotification);
  } else {
    console.log('[FCM] ‚úÖ Kh√¥ng c√≥ notification khi kh·ªüi ƒë·ªông app');
  }
};

// Hi·ªÉn th·ªã th√¥ng b√°o c·ª•c b·ªô (local notification)

let currentAppState = AppState.currentState;

AppState.addEventListener('change', nextAppState => {
  currentAppState = nextAppState;
});

const showLocalNotification = async (remoteMessage: any) => {
  if (!remoteMessage || !remoteMessage.notification) return;

  // Ch·ªâ hi·ªÉn th·ªã notification khi app ƒëang foreground
  if (currentAppState === 'active') {
    try {
      await notifee.displayNotification({
        title: remoteMessage.notification.title,
        body: remoteMessage.notification.body,
        ios: {
          sound: 'default',
        },
        android: {
          channelId: 'default_channel_id_v2',
          sound: 'default', // üîä Th√™m d√≤ng n√†y ƒë·ªÉ c√≥ √¢m thanh m·∫∑c ƒë·ªãnh
          pressAction: { id: 'default' },
          importance: AndroidImportance.HIGH,
        },
        data: remoteMessage.data,
      });
    } catch (error) {
      console.log('[FCM] ‚ùå Kh√¥ng th·ªÉ hi·ªÉn th·ªã local notification:', error);
    }
  } else {
    // App ƒëang ·ªü background ho·∫∑c killed, Firebase t·ª± hi·ªÉn th·ªã notification r·ªìi
    console.log('[FCM] App ·ªü background ho·∫∑c killed, kh√¥ng hi·ªÉn th·ªã local notification.');
  }
};

// const showLocalNotification = async (remoteMessage: any) => {
//   if (!remoteMessage || !remoteMessage.notification) {
//     console.log('[FCM] ‚ö†Ô∏è Payload kh√¥ng c√≥ notification:', remoteMessage);
//     return;
//   }

//   console.log(
//     '[FCM] üì® Hi·ªÉn th·ªã local notification:',
//     remoteMessage.notification,
//   );

//   try {
//     await notifee.displayNotification({
//       title: remoteMessage.notification.title,
//       body: remoteMessage.notification.body,
//       android: {
//         channelId: 'default_channel_id_v2',
//         pressAction: {id: 'default'},
//       },
//       data: remoteMessage.data,
//     });
//   } catch (error) {
//     console.log('[FCM] ‚ùå Kh√¥ng th·ªÉ hi·ªÉn th·ªã local notification:', error);
//   }
// };

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n v√†o th√¥ng b√°o
const handleNotificationAction = (remoteMessage: any) => {
  console.log('B·∫•m v√†o th√¥ng b√°o ƒë√¢y');
  const screen = remoteMessage?.data?.screen;
  if (screen) {
    navigate(screen);
    Alert.alert('Chuy·ªÉn h∆∞·ªõng', remoteMessage?.notification?.body || '');
  } else {
    navigate('NotificationScreen');
    Alert.alert('Th√¥ng b√°o', remoteMessage?.notification?.body || '');
  }
};
